!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=8)}([function(e,t,n){"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n=function(e,t){var n=e[1]||"",r=e[3];if(!r)return n;if(t&&"function"==typeof btoa){var o=(a=r,c=btoa(unescape(encodeURIComponent(JSON.stringify(a)))),u="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(c),"/*# ".concat(u," */")),i=r.sources.map((function(e){return"/*# sourceURL=".concat(r.sourceRoot||"").concat(e," */")}));return[n].concat(i).concat([o]).join("\n")}var a,c,u;return[n].join("\n")}(t,e);return t[2]?"@media ".concat(t[2]," {").concat(n,"}"):n})).join("")},t.i=function(e,n,r){"string"==typeof e&&(e=[[null,e,""]]);var o={};if(r)for(var i=0;i<this.length;i++){var a=this[i][0];null!=a&&(o[a]=!0)}for(var c=0;c<e.length;c++){var u=[].concat(e[c]);r&&o[u[0]]||(n&&(u[2]?u[2]="".concat(n," and ").concat(u[2]):u[2]=n),t.push(u))}},t}},function(e,t,n){"use strict";e.exports=function(e,t){return t||(t={}),"string"!=typeof(e=e&&e.__esModule?e.default:e)?e:(/^['"].*['"]$/.test(e)&&(e=e.slice(1,-1)),t.hash&&(e+=t.hash),/["'() \t\n]/.test(e)||t.needQuotes?'"'.concat(e.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):e)}},function(e,t,n){e.exports=n.p+"img/background.png"},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r={"&":"&amp;",">":"&gt;","<":"&lt;",'"':"&quot;","'":"&#39;","`":"&#96;"},o=new RegExp(Object.keys(r).join("|"),"g");t.default=function(){var e=arguments.length<=0||void 0===arguments[0]?"":arguments[0];return String(e).replace(o,(function(e){return r[e]}))},e.exports=t.default},function(e,t,n){var r=n(5),o=n(6);"string"==typeof(o=o.__esModule?o.default:o)&&(o=[[e.i,o,""]]);var i={insert:"head",singleton:!1};r(o,i);e.exports=o.locals||{}},function(e,t,n){"use strict";var r,o=function(){return void 0===r&&(r=Boolean(window&&document&&document.all&&!window.atob)),r},i=function(){var e={};return function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}e[t]=n}return e[t]}}(),a=[];function c(e){for(var t=-1,n=0;n<a.length;n++)if(a[n].identifier===e){t=n;break}return t}function u(e,t){for(var n={},r=[],o=0;o<e.length;o++){var i=e[o],u=t.base?i[0]+t.base:i[0],l=n[u]||0,s="".concat(u," ").concat(l);n[u]=l+1;var f=c(s),p={css:i[1],media:i[2],sourceMap:i[3]};-1!==f?(a[f].references++,a[f].updater(p)):a.push({identifier:s,updater:h(p,t),references:1}),r.push(s)}return r}function l(e){var t=document.createElement("style"),r=e.attributes||{};if(void 0===r.nonce){var o=n.nc;o&&(r.nonce=o)}if(Object.keys(r).forEach((function(e){t.setAttribute(e,r[e])})),"function"==typeof e.insert)e.insert(t);else{var a=i(e.insert||"head");if(!a)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");a.appendChild(t)}return t}var s,f=(s=[],function(e,t){return s[e]=t,s.filter(Boolean).join("\n")});function p(e,t,n,r){var o=n?"":r.media?"@media ".concat(r.media," {").concat(r.css,"}"):r.css;if(e.styleSheet)e.styleSheet.cssText=f(t,o);else{var i=document.createTextNode(o),a=e.childNodes;a[t]&&e.removeChild(a[t]),a.length?e.insertBefore(i,a[t]):e.appendChild(i)}}function d(e,t,n){var r=n.css,o=n.media,i=n.sourceMap;if(o?e.setAttribute("media",o):e.removeAttribute("media"),i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),e.styleSheet)e.styleSheet.cssText=r;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(r))}}var y=null,m=0;function h(e,t){var n,r,o;if(t.singleton){var i=m++;n=y||(y=l(t)),r=p.bind(null,n,i,!1),o=p.bind(null,n,i,!0)}else n=l(t),r=d.bind(null,n,t),o=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)};return r(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;r(e=t)}else o()}}e.exports=function(e,t){(t=t||{}).singleton||"boolean"==typeof t.singleton||(t.singleton=o());var n=u(e=e||[],t);return function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){for(var r=0;r<n.length;r++){var o=c(n[r]);a[o].references--}for(var i=u(e,t),l=0;l<n.length;l++){var s=c(n[l]);0===a[s].references&&(a[s].updater(),a.splice(s,1))}n=i}}}},function(e,t,n){"use strict";n.r(t);var r=n(0),o=n.n(r),i=n(1),a=n.n(i),c=n(2),u=n.n(c),l=o()(!0);l.push([e.i,"@import url(https://fonts.googleapis.com/css?family=Red+Hat+Text&display=swap);"]);var s=a()(u.a);l.push([e.i,"html,body{scroll-behavior:smooth;margin:0;padding:0;font-family:'Red Hat Text'}.main{background:url("+s+");height:100vh;display:flex;justify-content:center;flex-direction:column;align-items:center}.main__text{color:#ebebebbf;text-align:center;font-size:9rem}.main__break-line{width:40rem;height:3px;background-color:#fafafa}footer{text-align:center}copyright-x{--fontColor: #ffffff}@media screen and (max-width: 655px){.main__text{font-size:5rem}.main__break-line{width:100%}}\n","",{version:3,sources:["webpack://src/styles/main.scss"],names:[],mappings:"AAGA,UACE,sBAAuB,CACvB,QAAS,CACT,SAAU,CACV,0BAA2B,CAC5B,MAGC,kDAA2C,CAC3C,YAAa,CACb,YAAa,CACb,sBAAuB,CACvB,qBAAsB,CACtB,kBAAmB,CACnB,YACE,eAAgB,CAChB,iBAAkB,CAClB,cAAe,CAChB,kBAEC,WAAY,CACZ,UAAW,CACX,wBAAyB,CAC1B,OAID,iBAAkB,CACnB,YAGC,oBAAY,CACb,qCAIG,YACE,cAAe,CAChB,kBAEC,UAAW,CACZ",sourcesContent:["@import url('https://fonts.googleapis.com/css?family=Red+Hat+Text&display=swap');\n@import './mixin';\n\nhtml, body {\n  scroll-behavior: smooth;\n  margin: 0;\n  padding: 0;\n  font-family: 'Red Hat Text';\n}\n\n.main {\n  background: url('../assets/background.png');\n  height: 100vh;\n  display: flex;\n  justify-content: center;\n  flex-direction: column;\n  align-items: center;\n  &__text {\n    color: #ebebebbf;\n    text-align: center;\n    font-size: 9rem;\n  }\n  &__break-line {\n    width: 40rem;\n    height: 3px;\n    background-color: #fafafa;\n  }\n}\n\nfooter {\n  text-align: center;\n}\n\ncopyright-x {\n  --fontColor: #ffffff;\n}\n\n@media screen and (max-width: 655px) {\n  .main {\n    &__text {\n      font-size: 5rem;\n    }\n    &__break-line {\n      width: 100%;\n    }\n  }\n}"],sourceRoot:""}]),t.default=l},function(e,t){!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=0)}([function(e,t){function n(e){return(n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function o(e,t){return!t||"object"!==n(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function i(e){var t="function"==typeof Map?new Map:void 0;return(i=function(e){if(null===e||(n=e,-1===Function.toString.call(n).indexOf("[native code]")))return e;var n;if("function"!=typeof e)throw new TypeError("Super expression must either be null or a function");if(void 0!==t){if(t.has(e))return t.get(e);t.set(e,r)}function r(){return a(e,arguments,l(this).constructor)}return r.prototype=Object.create(e.prototype,{constructor:{value:r,enumerable:!1,writable:!0,configurable:!0}}),u(r,e)})(e)}function a(e,t,n){return(a=c()?Reflect.construct:function(e,t,n){var r=[null];r.push.apply(r,t);var o=new(Function.bind.apply(e,r));return n&&u(o,n.prototype),o}).apply(null,arguments)}function c(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}function u(e,t){return(u=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function l(e){return(l=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var s=document.createElement("template");s.innerHTML="\n".concat("\n<style>\n:root {\n  --fontSize: 14px;\n  --fontColor: #72767B;\n}\n.copyright-section {\n\tfont-size: var(--fontSize, 14px);\n\tcolor: var(--fontColor, #72767B);\n}\n</style>","\n").concat('\n<div class="copyright-section">\n\t<span class="copyright">\n\t\t\tCopyright &copy; <span id="year"></span> <slot name="name">All rights reserved.</slot>\n</div>',"\n");var f=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&u(e,t)}(p,e);var t,n,i,a,f=(t=p,n=c(),function(){var e,r=l(t);if(n){var i=l(this).constructor;e=Reflect.construct(r,arguments,i)}else e=r.apply(this,arguments);return o(this,e)});function p(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,p),f.call(this)}return i=p,(a=[{key:"connectedCallback",value:function(){var e=this.attachShadow({mode:"open"});e.appendChild(s.content.cloneNode(!0)),null===this.getAttribute("year")?e.getElementById("year").innerHTML=(new Date).getFullYear():e.getElementById("year").innerHTML=this.getAttribute("year")}}])&&r(i.prototype,a),p}(i(HTMLElement));window.customElements.define("copyright-x",f)}])},function(e,t,n){"use strict";n.r(t);n(4),n(7);var r=n(3),o=n.n(r),i=(e,...t)=>e.raw.reduce((n,r,i)=>{let a=t[i-1];return Array.isArray(a)?a=a.join(""):e.raw[i-1]&&e.raw[i-1].endsWith("$")?n=n.slice(0,-1):a=o()(a),n+a+r});document.querySelector("body").innerHTML=i`
<main class="main"></main>
`,document.querySelector("main").innerHTML=i`
<a href="https://dev.to/hybridx">
  <img src="https://d2fltix0v2e0sb.cloudfront.net/dev-badge.svg" alt="Deepesh Nair's DEV Profile" height="30" width="30">
</a>
<div class="main__text">hybridX</div>
<div class="main__break-line"></div>
<div class="main__text">& Code</div>
 <copyright-x><span slot="name">hybridX</span></copyright-x>
`}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,