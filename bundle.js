(()=>{var e={95:()=>{!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=0)}([function(e,t){function n(e){return(n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function r(e,t){return!t||"object"!==n(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function o(e){var t="function"==typeof Map?new Map:void 0;return(o=function(e){if(null===e||(n=e,-1===Function.toString.call(n).indexOf("[native code]")))return e;var n;if("function"!=typeof e)throw new TypeError("Super expression must either be null or a function");if(void 0!==t){if(t.has(e))return t.get(e);t.set(e,r)}function r(){return i(e,arguments,u(this).constructor)}return r.prototype=Object.create(e.prototype,{constructor:{value:r,enumerable:!1,writable:!0,configurable:!0}}),c(r,e)})(e)}function i(e,t,n){return(i=a()?Reflect.construct:function(e,t,n){var r=[null];r.push.apply(r,t);var o=new(Function.bind.apply(e,r));return n&&c(o,n.prototype),o}).apply(null,arguments)}function a(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}function c(e,t){return(c=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function u(e){return(u=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var l=document.createElement("template");l.innerHTML="\n".concat("\n<style>\n:root {\n  --fontSize: 14px;\n  --fontColor: #72767B;\n}\n.copyright-section {\n\tfont-size: var(--fontSize, 14px);\n\tcolor: var(--fontColor, #72767B);\n}\n</style>","\n").concat('\n<div class="copyright-section">\n\t<span class="copyright">\n\t\t\tCopyright &copy; <span id="year"></span> <slot name="name">All rights reserved.</slot>\n</div>',"\n");var s=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&c(e,t)}(s,e);var t,n,o,i=(t=s,n=a(),function(){var e,o=u(t);if(n){var i=u(this).constructor;e=Reflect.construct(o,arguments,i)}else e=o.apply(this,arguments);return r(this,e)});function s(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,s),i.call(this)}return(o=[{key:"connectedCallback",value:function(){var e=this.attachShadow({mode:"open"});e.appendChild(l.content.cloneNode(!0)),null===this.getAttribute("year")?e.getElementById("year").innerHTML=(new Date).getFullYear():e.getElementById("year").innerHTML=this.getAttribute("year")}}])&&function(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}(s.prototype,o),s}(o(HTMLElement));window.customElements.define("copyright-x",s)}])},144:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>d});var r=n(15),o=n.n(r),i=n(645),a=n.n(i),c=n(667),u=n.n(c),l=n(322),s=a()(o());s.push([e.id,"@import url(https://fonts.googleapis.com/css?family=Red+Hat+Text&display=swap);"]);var f=u()(l.Z);s.push([e.id,"html,body{scroll-behavior:smooth;margin:0;padding:0;font-family:'Red Hat Text'}.main{background:url("+f+");height:100vh;display:flex;justify-content:center;flex-direction:column;align-items:center}.main__text{color:#ebebebbf;text-align:center;font-size:9rem}.main__break-line{width:40rem;height:3px;background-color:#fafafa}footer{text-align:center}copyright-x{--fontColor: #ffffff}@media screen and (max-width: 655px){.main__text{font-size:5rem}.main__break-line{width:100%}}\n","",{version:3,sources:["webpack://./src/styles/main.scss"],names:[],mappings:"AAGA,UACE,sBAAuB,CACvB,QAAS,CACT,SAAU,CACV,0BAA2B,CAC5B,MAGC,kDAA2C,CAC3C,YAAa,CACb,YAAa,CACb,sBAAuB,CACvB,qBAAsB,CACtB,kBAAmB,CACnB,YACE,eAAgB,CAChB,iBAAkB,CAClB,cAAe,CAChB,kBAEC,WAAY,CACZ,UAAW,CACX,wBAAyB,CAC1B,OAID,iBAAkB,CACnB,YAGC,oBAAY,CACb,qCAIG,YACE,cAAe,CAChB,kBAEC,UAAW,CACZ",sourcesContent:["@import url('https://fonts.googleapis.com/css?family=Red+Hat+Text&display=swap');\n@import './mixin';\n\nhtml, body {\n  scroll-behavior: smooth;\n  margin: 0;\n  padding: 0;\n  font-family: 'Red Hat Text';\n}\n\n.main {\n  background: url('../assets/background.png');\n  height: 100vh;\n  display: flex;\n  justify-content: center;\n  flex-direction: column;\n  align-items: center;\n  &__text {\n    color: #ebebebbf;\n    text-align: center;\n    font-size: 9rem;\n  }\n  &__break-line {\n    width: 40rem;\n    height: 3px;\n    background-color: #fafafa;\n  }\n}\n\nfooter {\n  text-align: center;\n}\n\ncopyright-x {\n  --fontColor: #ffffff;\n}\n\n@media screen and (max-width: 655px) {\n  .main {\n    &__text {\n      font-size: 5rem;\n    }\n    &__break-line {\n      width: 100%;\n    }\n  }\n}\n"],sourceRoot:""}]);const d=s},645:e=>{"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n=e(t);return t[2]?"@media ".concat(t[2]," {").concat(n,"}"):n})).join("")},t.i=function(e,n,r){"string"==typeof e&&(e=[[null,e,""]]);var o={};if(r)for(var i=0;i<this.length;i++){var a=this[i][0];null!=a&&(o[a]=!0)}for(var c=0;c<e.length;c++){var u=[].concat(e[c]);r&&o[u[0]]||(n&&(u[2]?u[2]="".concat(n," and ").concat(u[2]):u[2]=n),t.push(u))}},t}},15:e=>{"use strict";function t(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}e.exports=function(e){var n,r,o=(r=4,function(e){if(Array.isArray(e))return e}(n=e)||function(e,t){var n=e&&("undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"]);if(null!=n){var r,o,i=[],a=!0,c=!1;try{for(n=n.call(e);!(a=(r=n.next()).done)&&(i.push(r.value),!t||i.length!==t);a=!0);}catch(e){c=!0,o=e}finally{try{a||null==n.return||n.return()}finally{if(c)throw o}}return i}}(n,r)||function(e,n){if(e){if("string"==typeof e)return t(e,n);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?t(e,n):void 0}}(n,r)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),i=o[1],a=o[3];if("function"==typeof btoa){var c=btoa(unescape(encodeURIComponent(JSON.stringify(a)))),u="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(c),l="/*# ".concat(u," */"),s=a.sources.map((function(e){return"/*# sourceURL=".concat(a.sourceRoot||"").concat(e," */")}));return[i].concat(s).concat([l]).join("\n")}return[i].join("\n")}},667:e=>{"use strict";e.exports=function(e,t){return t||(t={}),"string"!=typeof(e=e&&e.__esModule?e.default:e)?e:(/^['"].*['"]$/.test(e)&&(e=e.slice(1,-1)),t.hash&&(e+=t.hash),/["'() \t\n]/.test(e)||t.needQuotes?'"'.concat(e.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):e)}},322:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});const r=n.p+"db9592d8d786b1d682f23e6f88255ac7.png"},972:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n={"&":"&amp;",">":"&gt;","<":"&lt;",'"':"&quot;","'":"&#39;","`":"&#96;"},r=new RegExp(Object.keys(n).join("|"),"g");t.default=function(){var e=arguments.length<=0||void 0===arguments[0]?"":arguments[0];return String(e).replace(r,(function(e){return n[e]}))},e.exports=t.default},545:(e,t,n)=>{var r=n(379),o=n(144);"string"==typeof(o=o.__esModule?o.default:o)&&(o=[[e.id,o,""]]);r(o,{insert:"head",singleton:!1}),e.exports=o.locals||{}},379:(e,t,n)=>{"use strict";var r,o=function(){var e={};return function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}e[t]=n}return e[t]}}(),i=[];function a(e){for(var t=-1,n=0;n<i.length;n++)if(i[n].identifier===e){t=n;break}return t}function c(e,t){for(var n={},r=[],o=0;o<e.length;o++){var c=e[o],u=t.base?c[0]+t.base:c[0],l=n[u]||0,s="".concat(u," ").concat(l);n[u]=l+1;var f=a(s),d={css:c[1],media:c[2],sourceMap:c[3]};-1!==f?(i[f].references++,i[f].updater(d)):i.push({identifier:s,updater:h(d,t),references:1}),r.push(s)}return r}function u(e){var t=document.createElement("style"),r=e.attributes||{};if(void 0===r.nonce){var i=n.nc;i&&(r.nonce=i)}if(Object.keys(r).forEach((function(e){t.setAttribute(e,r[e])})),"function"==typeof e.insert)e.insert(t);else{var a=o(e.insert||"head");if(!a)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");a.appendChild(t)}return t}var l,s=(l=[],function(e,t){return l[e]=t,l.filter(Boolean).join("\n")});function f(e,t,n,r){var o=n?"":r.media?"@media ".concat(r.media," {").concat(r.css,"}"):r.css;if(e.styleSheet)e.styleSheet.cssText=s(t,o);else{var i=document.createTextNode(o),a=e.childNodes;a[t]&&e.removeChild(a[t]),a.length?e.insertBefore(i,a[t]):e.appendChild(i)}}function d(e,t,n){var r=n.css,o=n.media,i=n.sourceMap;if(o?e.setAttribute("media",o):e.removeAttribute("media"),i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),e.styleSheet)e.styleSheet.cssText=r;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(r))}}var p=null,y=0;function h(e,t){var n,r,o;if(t.singleton){var i=y++;n=p||(p=u(t)),r=f.bind(null,n,i,!1),o=f.bind(null,n,i,!0)}else n=u(t),r=d.bind(null,n,t),o=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)};return r(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;r(e=t)}else o()}}e.exports=function(e,t){(t=t||{}).singleton||"boolean"==typeof t.singleton||(t.singleton=(void 0===r&&(r=Boolean(window&&document&&document.all&&!window.atob)),r));var n=c(e=e||[],t);return function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){for(var r=0;r<n.length;r++){var o=a(n[r]);i[o].references--}for(var u=c(e,t),l=0;l<n.length;l++){var s=a(n[l]);0===i[s].references&&(i[s].updater(),i.splice(s,1))}n=u}}}}},t={};function n(r){var o=t[r];if(void 0!==o)return o.exports;var i=t[r]={id:r,exports:{}};return e[r](i,i.exports,n),i.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.p="/",(()=>{"use strict";n(545),n(95);var e=n(972),t=n.n(e);const r=(e,...n)=>e.raw.reduce(((r,o,i)=>{let a=n[i-1];return Array.isArray(a)?a=a.join(""):e.raw[i-1]&&e.raw[i-1].endsWith("$")?r=r.slice(0,-1):a=t()(a),r+a+o}));var o,i;function a(e,t){return t||(t=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}document.querySelector("body").innerHTML=r(o||(o=a(['\n<main class="main"></main>\n']))),document.querySelector("main").innerHTML=r(i||(i=a(['\n<a href="https://dev.to/hybridx">\n  <img src="https://d2fltix0v2e0sb.cloudfront.net/dev-badge.svg" alt="Deepesh Nair\'s DEV Profile" height="30" width="30">\n</a>\n<div class="main__text">hybridX</div>\n<div class="main__break-line"></div>\n<div class="main__text">& Code</div>\n <copyright-x><span slot="name">hybridX</span></copyright-x>\n'])))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,